vector<int> dijkstra_shortest_path(const Graph& G, int source, vector<int>& previous)
{
    int numVert = G.size();
    vector<int> dist(numVert, INF);
    vector<bool> visitedVert(numVert, false);
    previous.resize(numVert, -1);
    
    // Min heap with (distance, vertex)
    priority_queue<pair<int, int>, vector<pair<int, int>>, CompareWeights> minHeap;
    minHeap.push({source, 0});
    dist[source] = 0;

    while (!minHeap.empty())
    {
        int currentEdge = minHeap.top().first; // Extract vertex with the smallest weight
        minHeap.pop();

        if (visitedVert[currentEdge]) continue;
        visitedVert[currentEdge] = true;

        for (const Edge& edge : G[currentEdge])
        {
            int vert = edge.dst;
            int weight = edge.weight;

            if (!visitedVert[vert] && dist[currentEdge] + weight < dist[vert])
            {
                dist[vert] = dist[currentEdge] + weight;
                previous[vert] = currentEdge;
                minHeap.push({vert, dist[vert]});
            }
        }
    }

    return dist; // Complexity: O((E + V) log V)
}